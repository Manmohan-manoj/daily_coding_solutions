class Fibonacci(object):

    def __init__(self, number_input=0):
        self.number = abs(number_input)
        self.negative = True if number_input < 0 else False

    @staticmethod
    def factorial(n):
        if n == 0:
            return 1
        res = n
        i = n - 1
        while i > 0:
            res = res * i
            i -= 1
        return res

    def binomial(self, n, k):
        result = self.factorial(n) / (self.factorial(k) * self.factorial(n - k))
        return result

    def binomial_method(self):
        i = (self.number - 1) / 2
        result = 0
        for k in range(0, i + 1):
            n = self.number - k - 1
            result = result + self.binomial(n, k)
        if self.negative:
            return 0 - result
        return result

    def list_method(self):
        first = 0
        second = 1
        result = [first, second]
        counter = 0
        while counter <= self.number:
            result_temp = first + second
            first = second
            second = result_temp
            result.append(result_temp)
            counter += 1
        if self.negative:
            return (0 - result[self.number])
        return result[self.number]


if __name__ == "__main__":
    input_number = input("input a positive N: ")
    try:
        input_number = int(input_number)
    except ValueError:
        print("Not an integer")

    NthFibonacci = Fibonacci(input_number)
    print "Binomial equation method: ", NthFibonacci.binomial_method()
    print "Method using a list: ", NthFibonacci.list_method()
